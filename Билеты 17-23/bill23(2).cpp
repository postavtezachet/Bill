//Билет 23 задание 2
//Максим
//Отсортировать однонаправленное кольцо изменением указателей
//Я создаю кольцо так чтобы голова была самым левым элементом (если представить кольцо как линию )

#include<stdio.h>
#include<Windows.h>
#pragma warning(disable : 4996)//чтобы использовать scanf fopen и т.д.
struct ring {
	int n;
	ring* next;
};
void create(ring** head) {//Функция создания колца(передаём указатель на указатель так как нам надо его менять)

	ring* s, *trig;//s это новый элемент кольца, trig нужен для добовления в кольцо(он будет самым правым элементом(если представить кольцо как линию ))
	s = (ring*)calloc(1, sizeof(ring));
	printf("Введите число\n");
	while (!scanf("%d", &s->n)) {// проверка на ввод числа
		rewind(stdin);// это очищение буффера( так как после scanf остаётся \n функции типо gets могут его прочитать и произойдёт прикол)
	}
	if (!(*head)) {// если кольцо ещё не создано
		(*head) = s;// указываем указателем головы на новую структуру
		(*head)->next = (*head);// зацикливаем наше кольцо
	}
	else {
		trig = (*head);//trig нужен чтобы найти самый правый элемент(если представить кольцо как линию )
		while (trig->next !=(*head)) {//пока указатель trig->next не будет на голове
			trig = trig->next;
		}
		trig->next = s;//связываем самый правый указатель с новой структурой
		s->next = (*head);//зацикливаем наше кольцо
	}
}
void output(ring* head) {// вывод(тут мы передаём просто указатель так как нам не надо его изменять и копии нам хватит)
	ring* trig = (head);//для проверки прошли ли мы всё кольцо
	do {
		printf("%d ", head->n);
		head = head->next;
		if (head == trig) {
			break;
		}
	} while (1);
}
void sort(ring** head) {//Функция сортировки колца(передаём указатель на указатель так как нам надо его менять)
	ring* s1, * s2, * s3, * s4 = nullptr,*trig;// s1 это то куда мы будем записывать структуру с наибольшим числом
												// s2 мы будем сравнивать с s1 чтобы найти наибольшее число
												//s3 предыдущий элемент перед s1
												//s4 нужен для первой итерации чтобы поставить указатель головы на новый элемент
												//trig нужен для проверки прошли ли мы кольцо
	ring* xz;// xz мы проходим по кольцу и следим куда вставить s1
	xz = (ring*)calloc(1, sizeof(ring));
	xz->next = (*head);// xz это структура которая указывает своим указателем на голову
	trig = (*head);// запоминаем где голова
	for (; xz->next->next != trig;) {// если мы дошли до trig то это конец кольца
		s1 = xz->next;
		s3 = xz;
		for (s2 = s1; s2->next != trig; s2 = s2->next) {
			if (s2->next->n > s1->n) {// мы сравниваем s2->next так как нам надо узнать какой предыдущий элемент(а у нас однонаправленное кольцо)
				s3 = s2;
				s1 = s2->next;
			}
		}
		if (s1 != xz->next) {// если первый элемент не самый большой
			s3->next = s1->next;// связываем предыдущий и следующий элемент от наиболшего
			s1->next = xz->next;// связывем самый большой элемент со следующим после xz(например в первой итерации связываем с первым элементом и теперь s1 первый) 
			xz->next = s1;// ставим наш бегунок на s1
		}
		
		if (!s4) {// если это первая итерация
			while (1) {// в этом цикле мы ищем где самое правое число(если представить кольцо как линию )
				if (s3->next == (*head)) {//если нашли то связываем с s1 так как на первой итерации s1 это первый элемент
					s3->next = s1;
					break;
				}
				s3 = s3->next;
			}
			(*head) =trig= s4 = s1;// ставим указатель головы и trig(чтобы знать где начало) на s1
									// s4 надо чтобы в этот if больше не заходить
			
		}
		xz = xz->next;

	}
}
int main() {
	system("chcp 1251>null");// Тут мы меняем кодировку(так как setlocale не позволяет нам записывать строки на русском)
	ring* head = nullptr;
	int n;
	printf("Введите количество чисел которые хотите добавить\n");
	while (!scanf("%d", &n) || n <= 0) {// проверка на ввод числа и является ли это число >0
		rewind(stdin);// это очищение буффера( так как после scanf остаётся \n функции типо gets могут его прочитать и произойдёт прико
	}
	for (int i = 0; i < n; i++) {
		create(&head);
	}
	printf("\nКольцо до сортировки\n");
	output(head);
	sort(&head);
	printf("\nКольцо после сортировки\n");
	output(head);
	return 0;
}